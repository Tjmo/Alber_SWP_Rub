2 Arten von Datenstrukturen:
Liste
langsamer als array, verkettete Listen, kann man neue elemente/objekte hinzufügen, in objekten stehen value (string value z.b.), es steht ein zweites elemente (next, symbol, zeiger,-die aufs nächste element zeigen)
wird durchgelooped
(einzelne objekte iwo im speicher verteilt und hängen über zeiger zusammen)

oder

Array
im speicher gibts eine Startstelle und die Elemente zum Array sind hintereinander, das betriebssystem definiert des mit anfangsaddresse, typen, (die zahlen hängen alle zusammen hintereinander), array ist schneller als eine Liste
java kann alles in einem rutsch durchlesen, zum array kann man keine neuen elemente hinzufügen




Namespaces
sind nur die Sichtbarkeiten, in Methode haben wir lokale variable -> namespace (leveling)

dictionary ist unsortiert

------------------------------------------------------------ neue Stunde

Lambda funktion ist kürzere Weise eine Methode zu schreiben und eine "anonyme Methode" da sie keinen Methodennamen braucht/hat

Instanz: Objekt (In einer Klasse macht man mit new eine Instanz (Kopie einer Klasse mit individueller Werte))
Referenz: Ist ein Verweis auf ein Objekt (Zeiger: Rubner zeigt auf Glatzl (link))
Identität: Fingerabdruck eines Objektes

||||||||||||||||||||||||||||||||||||||| python code
a=6
b=5
a / b
zahl = 8 #instanz obwohl integer
id(zahl) #identität der Zahl
zahl1 = 8
id(zahl1) #id der speicherstelle in der der 8ter liegt
mlist = [0,1,'hallo']
id(mlist)
mlist2 = [0,1,'hallo']
id(mlist2) #id(mlist) != id(mlist2)

l1=[1,2]
l2=l1
l1.append(3)
#wir sehen, dass sowohl l1 als auch l2 mit 3 erweitert wurden (da l2 auf l1 verweist)
|||||||||||||||||||||||||||||||||||||||

String ist Inmutable
Alle sachen mit new, listen, ... sind Mutable
a=6
b=a -Referenz

Veränderlich ~~ Mutable - List, Bytearray
Unveränderlich ~~ Inmutable - tuple, str, bytes

Rheinwerk Seite durchlesen
.append fügt etwas hinzu (z.B. an Liste)

#man muss global for mutable datentypen schreiben !!!HÜ!!!
KW41 hü Pokersimulator
Modulierung, Methode wo man 5 Objekte rausbekommt, array mit 52 stellen und immer über modolo farbe finden und über division farbe finden, 0-12 (13) 26%13(0,1,2,3(Farbe)) 26/13(Zahl)
------------------------------------------------------------ neue Stunde
Programm zu Maschinen Code (00101010)

Sprachen wie Python, Java, C#, erzeugen Bytecode (kein Maschinencode) .class Dateien -> lesbare Textpassagen und Hieroglyphen (Maschinencode-Teile) enthalten

Vorteile:
Maschinencode Ist am schnellsten(effektivsten) auf dieser einen Hardware
Interpretencode wird geschrieben & compiliert, wir können diese .class datei nehmen und auf jedem System dass ein Javainterpreten hat geben und benutzen (Plattformunabhängig wo Java (od.a.) installiert ist), einmal neu Compilieren und es funktioniert

Nachteile:
Maschinen-Code funktioniert auf anderen Versionen/PC's nicht raspbpie Versionen, 32-bit versionen, dort 
Interpretensprachen: Verwaltet vieles selber (Speicher z.B.) wird durch Garbage-Collector verwendet aber eben nicht auf 100% effektiv auf dieser Hardware (-> etwas langsam), Python verwendet viel C code weshalb es trotzdem schnell ist da es native c code verwendet,

In welcher Programmiersprache sind Java, C#, Python programmiert?
in C und C ist in Assambler programmiert welcher zwar eine Programmiersprache ist aber hauptsächlich binär-code (sehr hardware nah spezifische Befehle)
{[(steht alles in der Powerpoint unter den Links)]}

__Seiteneffekte:__
_Mutable_
Objekte die verändert werden Können, Listen, Dictionaries
a=5 b=a // a=5 b=5 -> Id bleibt gleich da Python 5 im Speicher immer gleich speichert (keine neue Instanz)
_Immutable_
primitive Datentypen z.B. x=3 -> Instanz (es ganze), Referenz zeigt drauf, Objekt hat eindeutige Id

In-Place
nehmen wir an wir haben ein Array (bzw. Datenstruktur) und wir wollen diese Datenstruktur sortieren, z.B. wir schauen ein Objekt durch und alle Objekte wo ist das Minimum -> wird nach vorne getauscht und es geht weiter (kleinsten Zahlen blubbern nach vorne)
Wir sortieren im Array im Zusatzspeicher -> In-Place
Ist wenn wir nur konstanten Zusatzspeicher benötigen aber nicht von der Anzahl abhängigen speicher
Python oder Java bibliotheken machen abhängige Operationen, z.B. Liste sorted, list2=sorted.list1 (nicht in-place)
Ob ein Verfahren in Datenstrukturen ohne zusätzlichen Speicher

bei der deepcopy mach ich alles in einer neuen Liste

Wenn ich eine Liste habe und in dieser Liste sind nur mehr Imutable objekte drinnen und wir wollen eine copy machen dann funktioniert die deepcopy

Aber wenn ich in einer liste wieder eine liste habe dann ist meine deepcopy keine echte deepcopy sondern nur eine Referenz
{[(Alles durchlesen und fragen in Powerpoint)]}

Style-Guides
sind wichtige Guides damit die Syntax leserlich ist und schön formatiert bleibt

File Encoding 
basically Ascii code für die Zeichen bzw Tasten
-> wenn in China programmiere und in Österreich den Code abgebe dann wird es wegen den Verschiedenen Werten des codes nicht erkannt -> muss also alles angepasst werden

{[(DelftStack -> Code)]}
{[(Rheinwerk-Verlag -> Eingebaute Funktionen)]}

Dunder Variablen
sind in Main bzw Einstiegspunkt
||||||||||||||||||||||||||||||||||||
if __name__ == "__main__":
    meine_function()
||||||||||||||||||||||||||||||||||||
Dunder = Doubleunderscore
wird von Python standardmäßig befüllt
ist Zeichen, dass eine besondere Variable ist
in jeder der 3 Pythondatei könnte ich if name == könnte dann aber nur dann ausgeführt werden in der Datei in der ich die Dunder benutzt habe
In test1 führe ich der Methoden in der Main aus

------------------------------------------------------------ neue Stunde

Es gibt wenn alles passt (aber auch nur passt), dann bekommt man einen Dreier
Man muss viele Extras einbauen, damit man in die Richtung eines Einsers kommt.

Von Int Float Double
Int hernehmen, da des Ganzzahlen sind und weniger Rechenleistung benötigen

Mainmethoden machen weil grundlegende funktionen importieren

immer in methoden einpacken zum importieren
::-1 dreht um

---Debuggen:---
Debuggen Schritt für Schritt

https://realpython.com/python-debugging-pdb/#essential-pdb-commands

ternäre operatoren sind if ähnlich
-------------------
min = a < b and a or b
print(min)

a = 5
rval = True if a > 5 else False
-------------------

------------------------------------------------------------ neue Stunde

